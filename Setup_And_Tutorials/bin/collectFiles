#!/usr/bin/python3
import xml.etree.ElementTree as ET
import os
import shutil
import argparse
from pathlib import Path
from os import path
import sys


def fixPath(s, xmlfile):
    xmlfile = Path(xmlfile)
    prjdir = xmlfile.parents[0]
    srcdir = xmlfile.with_suffix(".srcs")
    return s.replace("$PPRDIR", str(prjdir)).replace("$PSRCDIR", str(srcdir))


def parseXML(xmlfile):
    srcs = []

    tree = ET.parse(xmlfile)

    root = tree.getroot()
    for fileSets in root.iter("FileSets"):
        for fileSet in fileSets.iter("FileSet"):
            typ = fileSet.attrib["Type"]
            if typ == "DesignSrcs" or typ == "Constrs":
                for file in fileSet.iter("File"):
                    srcs.append(fixPath(file.attrib["Path"], xmlfile))
    return srcs


def fixFileName(s):
    return s.replace(" ", "_")


def collectFiles(srcs, dest):
    if dest.exists():
        print(f"\n###############################\nERROR: directory {dest} exists.  Remove it and try again.")
        print(f"  If you really want to do that, you can remove it by typing: 'rm -rf {dest}'")
        print(f"    BE CAREFUL!!!!")
        print(f"      You will delete everything in it as well as all the subdirectories under it....")
        print(f"        Talk to a TA if in doubt...\n############################\n")
        sys.exit(1)

    dest.mkdir(parents=True, exist_ok=False)

    print(f"\nCopying {len(srcs)} files to directory: {dest}...")
    for fil in srcs:
        fixed = fixFileName(Path(fil).name)
        print(f"  Copying file '{fil}' to '{dest / fixed}'")
        shutil.copy(fil, dest / fixed)
    
    makefilesrc = Path(dest).parents[1] / "Setup_And_Tutorials" / "bin" / "Makefile"
    print(f"Copying {makefilesrc} to {dest}")
    shutil.copy(makefilesrc, dest)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("xprFile", help=".xpr file name to open")
    parser.add_argument(
        "destinationDirectory",
        help="Full path of directory to hold files (as in ~/220-myusername/Labs/Lab7)",
    )
    parser.add_argument(
        "--verbose", action="store_true", help="Operate in verbose mode"
    )

    args = parser.parse_args()

    srcs = parseXML(args.xprFile)
    if args.verbose:
        print(f"\nFiles to copy: {srcs}")

    dir = Path(args.destinationDirectory)

    collectFiles(srcs, dir)
    print("\nAll done...")
    print(f"  Now, go into {dir} and remove any testbench SystemVerilog files that might be there...")
    print(f"  Once that is done, you are ready to edit the Makefile and then build your design using 'make'")
    print("")


if __name__ == "__main__":
    main()
